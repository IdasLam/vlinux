{"version":3,"sources":["views/home/home.module.scss","components/header/header.module.scss","components/footer/footer.module.scss","components/navbar/navbar.module.scss","components/footer/footer.tsx","components/navbar/navbar.tsx","components/header/header.tsx","components/layout/layout.tsx","views/home/home.tsx","components/text/text.tsx","components/text-button/text-button.tsx","views/redovisning/redovisning.tsx","views/about/about.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Footer","className","styles","target","rel","href","fontSize","Navbar","to","Header","Layout","props","Fragment","children","Home","Text","kmom","Button","state","onClick","setKmom","Redovisning","useState","console","log","window","location","About","App","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cf4bd312.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"home_icon__3yGb4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__3wy06\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"footer_footer__EQtlF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav-links\":\"navbar_nav-links__dFd5P\"};","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport GitHubIcon from '@material-ui/icons/GitHub'\nimport LinkedInIcon from '@material-ui/icons/LinkedIn'\nimport styles from './footer.module.scss'\n\nconst Footer = () => {\n    return (\n        <footer className={styles['footer']}>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/IdasLam\">\n                <GitHubIcon fontSize=\"large\" />\n            </a>\n            <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://www.linkedin.com/in/ida-lam-941a331a4/\"\n            >\n                <LinkedInIcon fontSize=\"large\" />\n            </a>\n        </footer>\n    )\n}\n\nexport default Footer\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport styles from './navbar.module.scss'\n\nconst Navbar = () => {\n    return (\n        <nav className={styles['nav-links']}>\n            <Link to=\"redovisning\">redovisning</Link>\n            <Link to=\"om\">om</Link>\n        </nav>\n    )\n}\n\nexport default Navbar\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Navbar from '../navbar/navbar'\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon'\nimport styles from './header.module.scss'\n\nconst Header = () => {\n    return (\n        <header className={styles['header']}>\n            <div className={styles['header-me']}>\n                <Link to=\"./\">\n                    <h1 className={styles['me']}>\n                        Ida Lam\n                        <InsertEmoticonIcon fontSize=\"large\" />\n                    </h1>\n                </Link>\n            </div>\n            <Navbar />\n        </header>\n    )\n}\n\nexport default Header\n","import React, { FunctionComponent } from 'react'\n// import Navbar from \"../navbar/navbar\";\nimport Footer from '../footer/footer'\nimport Header from '../header/header'\n\nconst Layout: FunctionComponent = (props) => {\n    return (\n        <React.Fragment>\n            <Header />\n            <main>{props.children}</main>\n            <Footer />\n        </React.Fragment>\n    )\n}\n\nexport default Layout\n","import React from 'react'\nimport Layout from '../../components/layout/layout'\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions'\nimport styles from './home.module.scss'\n// import { Helmet } from 'react-helmet'\n\nconst Home = () => {\n    return (\n        <Layout>\n            {/* <Helmet>\n                <title>Ida Lam</title>\n            </Helmet> */}\n            <h1>Hejsan,</h1>\n            <h1>vad kul att du är här och chillar.</h1>\n            <h2 className=\"regular\">Jag heter Ida och är 20 år gammal.</h2>\n            <EmojiEmotionsIcon className={styles['icon']} />\n        </Layout>\n    )\n}\n\nexport default Home\n","import React, { FunctionComponent } from 'react'\n\ninterface TextInformation {\n    kmom: string\n    className: string\n}\n\nconst Text: FunctionComponent<TextInformation> = (props) => {\n    return (\n        <div className={props.className}>\n            <h1>kmom{props.kmom}</h1>\n            <br />\n            {props.children}\n        </div>\n    )\n}\n\nexport default Text\n","import React, { FunctionComponent } from 'react'\n\ninterface ButtonInterface {\n    setKmom: (kmom: string) => void\n    kmom: string\n}\n\nconst Button: FunctionComponent<ButtonInterface> = (state) => {\n    return (\n        <button\n            onClick={() => {\n                state.setKmom(state.kmom)\n            }}\n        >\n            kmom{state.kmom}\n        </button>\n    )\n}\n\nexport default Button\n","import React, { useState } from 'react'\nimport Text from '../../components/text/text'\nimport Layout from '../../components/layout/layout'\nimport Button from '../../components/text-button/text-button'\nimport './redovisning.scss'\n// import { Helmet } from 'react-helmet'\n\nconst Redovisning = () => {\n    const [kmom, setKmom] = useState('10')\n\n    console.log(window.location)\n\n    return (\n        <Layout>\n            {/* <Helmet>\n                <title>Ida Lam</title>\n            </Helmet> */}\n            <div className=\"buttons\">\n                <Button setKmom={setKmom} kmom=\"01\" />\n                <Button setKmom={setKmom} kmom=\"02\" />\n                <Button setKmom={setKmom} kmom=\"03\" />\n                <Button setKmom={setKmom} kmom=\"04\" />\n                <Button setKmom={setKmom} kmom=\"05\" />\n                <Button setKmom={setKmom} kmom=\"06\" />\n                <Button setKmom={setKmom} kmom=\"10\" />\n            </div>\n            <div className=\"rd\">\n                <Text kmom=\"01\" className={kmom === '01' ? kmom : 'none'}>\n                    <h2>\n                        Är du sedan tidigare bekant med Unix, Linux, Debian och/eller terminalen?\n                    </h2>\n                    <p>\n                        Sedan 1:an så har jag val att dualboota både min desktop och laptop med\n                        ubuntu desktop och under sommaren även testade på Linux mint. Jag har från\n                        början valt att inte jobba med windows då jag upplevde många problem och\n                        rekommenderades att utveckla på ubuntu. Vilken jag nu fortsätter att göra.\n                        Jag känner mig även relativt bekvämt med dess terminal.\n                    </p>\n                    <h2>\n                        Hur känns det med Unix-kommandon på terminalen, är det udda eller bekvämt?\n                    </h2>\n                    <p>\n                        Jag skulle nog säga att jag är ganska säker på tex cd och de “grundliga”\n                        kommandon. Jag har annars inte riktigt använt av de mer komplicerade. Annars\n                        utöver det så är jag ganska bekväm med att använda terminalen.\n                    </p>\n                    <h2>\n                        Valde du att köra standard med VirtualBox och Debian eller hur gjorde du?\n                    </h2>\n                    <p>\n                        Jag har valt att inte använda mig av VirtualBox och debian. Jag har istället\n                        valt att jobba från en Intel nuc som jag har hemma. På den nucen så körs\n                        ubuntu server.\n                    </p>\n                    <h2>\n                        Hur kändes det att jobba med VirtualBox och ser du fördelar med det\n                        arbetssättet?\n                    </h2>\n                    <p>\n                        Jag har sett andra använda VirtualBox och kan se att det är användbart då\n                        man kan köra en egen isolerad “box” och göra något annat på. Men att\n                        dessutom att man köra flera boxar samtidigt.\n                    </p>\n                    <h2>Hur gick det att installera Guest Additions?</h2>\n                    <p>\n                        Jag har valt att inte jobba med VirtualBox och har därmed inte strulat med\n                        det.\n                    </p>\n                    <h2>Var det något som krånglade eller tog extra mycket tid?</h2>\n                    <p>\n                        Eftersom jag redan hade allt från början så har jag inte hakat på något\n                        strul. Annars skulle jag bara säga att det var struligt att få upp me sidan\n                        med react, så att man skulle slippa klicka på foldrar för att hitta\n                        me-sidan. Det löstes genom att ha en index.html som skickar dig vidare till\n                        där “sidan” faktisk sitter.\n                    </p>\n                    <p>\n                        Det som strulade med att använda sig av react är att när man laddar om sidan\n                        på studentservern medan man är i om eller redovisning så blir det 404.\n                    </p>\n                </Text>\n                <Text kmom=\"02\" className={kmom === '02' ? kmom : 'none'}>\n                    <h2>\n                        Hur känns konceptet med Apache name-based Virtual Hosts? Känner du igen det\n                        sedan tidigare?\n                    </h2>\n                    <p>\n                        Jag har inte jobbat på detta viset innan, och inte alls med Apache\n                        name-based Virtual Hosts. Jag känner smått igen att jobba med DNS. Det som\n                        bekantar mig är att jag har jobbat lite med ett eget domännamn på loopia som\n                        är kopplad till hemmaservern. Trots det så är jag inte super bekant med det.\n                    </p>\n                    <h2>\n                        Det blir allt fler kommandon i terminalen, hur känns det med terminalen och\n                        dess kommandon?\n                    </h2>\n                    <p>\n                        Jag känner mig bekant med grunderna men när det kom till alla flaggor så\n                        började allt att bli ganska komplicerat. Dessutom så har vissa kommandon en\n                        längre manual än andra så det tog tid att hitta rätt. Annars tycker jag att\n                        det känns relativt bra med att sitta i terminalen, vilket inte känns\n                        främmande.\n                    </p>\n                    <h2>Gick det bra med ssh-nycklar och rsync över ssh?</h2>\n                    <p>\n                        Jag har sedan innan konfigurerat och kopplat upp med ssh nycklar till\n                        servern så jag slapp göra den delen. Medan rsync delen strulade först men\n                        som löste sig sen.\n                    </p>\n                    <p>\n                        När jag flyttade över allt och körde lynx kommandot så får jag “you need to\n                        enable javascript to run this app” för att jag har byggt min\n                        redovisningssida i react vilket i sin tur bygger upp sidan i javascript. Jag\n                        antar att jag får upp det meddelandet för att lynx inte kan köra javascript.\n                    </p>\n                    <h2>Hur kändes det att jobba med tmux?</h2>\n                    <p>\n                        Det har gått bra med att jobba med tmux, lite förvirrande i början med ctr+b\n                        d och sånt men det löste sig till slut. Dock saknar jag färgerna som finns i\n                        den vanliga terminalen, men jag anar att man kan göra några speciella\n                        configs.\n                    </p>\n                    <h2>\n                        Reflektera över hur du känner inför Unix som operativsystem så här långt?\n                    </h2>\n                    <p>\n                        Eftersom jag är bekant med det operativsystemet jag använder, ubuntu\n                        desktop, så känns det fortfarande bra. Dock så kör servern på ubuntu server,\n                        som är lite mer ovant där man endast kör från terminalen. Men vilket\n                        förmodligen är något positivt då man lär sig att använda terminalen med\n                        kommandon med alla dess flaggor.\n                    </p>\n                </Text>\n                <Text kmom=\"03\" className={kmom === '03' ? kmom : 'none'}>\n                    <h2>Är detta din första bekantskap med skriptprogrammering i Bash?</h2>\n                    <p>\n                        Jag skulle nog säga att det är den första gången jag har skrivit något\n                        “avancerat” i Bash. Men jag har innan gjort något enkelt script som kör\n                        några commands. Jag är bekant med Bash innan men har inte direkt jobbat med\n                        det.\n                    </p>\n                    <h2>\n                        Berätta om din uppfattning om Bash som programmeringsmiljö, relatera till\n                        andra programspråk du kan.\n                    </h2>\n                    <p>\n                        Grunderna kan jag känna igen men hur man skriver allt ser annorlunda ut än\n                        de språken jag har skrivit i. Det känns som någon kombination mellan PHP och\n                        JS, eller något sådant. Dock har jag aldrig tänkt mig att skriva ett\n                        “program” i Bash utan bara trodde att man endast kör kommandon i Bash\n                        istället för att skriva ut flera kommandon själv.{' '}\n                    </p>\n                    <p>\n                        Jag hade även problem med att skriva i ett icke arithmetic expansion sätt\n                        för mina ifs och for loops. Förstod inte riktigt varför.\n                    </p>\n                    <h2>\n                        Vilka möjligheter/utmaningar ser du med denna typen av skriptprogrammering?\n                    </h2>\n                    <p>\n                        Jag ser att det är bättre att skriva ett script på alla kommandon man ska\n                        köra, i sekvens, istället för att skriva alla kommandon i en terminal. Som\n                        blir speciellt jobbigt om man ska köra många. Det som jag skulel tänka är\n                        utmanande är att skriva ett avancerat skript likt “nya språk” som man ska\n                        lära sig i början är det alltid svårt att komma in i.\n                    </p>\n                    <h2>Var det något som var extra svårt eller utmanande i uppgifterna?</h2>\n                    <p>\n                        Jag tyckte labben var extra svår, jag visste inte riktigt hur man skulle gå\n                        tillväga utan att använda sig av grep och regex. jag kom inte på ett bra\n                        sätt att lösa uppgifterna med de kommandon vi fick lära oss. Så jag tyckte\n                        att det var mer enkelt att lösa dem med grep och regex som jag sedan\n                        pipe:ande till ett annat kommando.\n                    </p>\n                    <h2>Har du arbetat med Docker innan?</h2>\n                    <p>\n                        Jag har under sommaren jobbat med docker men mycket mer med docker-compose\n                        än bara docker. Jag känner igen mig i Dockerfilen och förstår grunderna i\n                        run, copy, entrypoint mm. Men jag har inte sedan innan jobbat eller bekantat\n                        mig med docker innan.\n                    </p>\n                    <h2>\n                        Anser du att det är någon fördel/nackdel med Docker om du jämför med\n                        VirtualBox?\n                    </h2>\n                    <p>\n                        Det som är bra med docker, i alla fall med den kunskapen jag har, så är det\n                        ganska snabbt att skapa flera containrar medan i VirtualBox så är det endast\n                        en container. Dessutom så är det snabbare att starta en container i Docker\n                        men att det även finns färdigkonfigurerade docker containers som man kan\n                        hämta hem. Istället för att starta en VB som tar mer minne osv så skulle jag\n                        nog föredra att jobba med docker.\n                    </p>\n                </Text>\n                <Text kmom=\"04\" className={kmom === '04' ? kmom : 'none'}>\n                    <h2>Vilken väg valde du för servern?</h2>\n                    <p>\n                        Eftersom jag har en lite större vana för JavaScript så valde jag att använda\n                        mig av express. Jag tycker att det är mer naturligt att köra något med\n                        JavaScript då det är ett språk jag har använt mig mest av.\n                    </p>\n                    <p>\n                        Det gick ganska bra att sätta upp allt för servern. Stötte inte på några\n                        större problem eller snarare några problem som inte gick att söka upp.\n                    </p>\n                    <h2>Hur kommer det sig att du valde det?</h2>\n                    <p>\n                        Jag har innan använt mig av express för server delen när har jobbat med\n                        hobbyprojekt. Trots att man har glömt bort lite så var det inte riktigt\n                        svårt att sätta sig tillbaka i det. Men som jag nämnde innan så tycker jag\n                        om JavaScript mycket bättre än vad jag gör PHP eller andra språk.\n                    </p>\n                    <h2>Gick det bra med Docker?</h2>\n                    <p>\n                        Det gick relativt bra med docker. Eftersom jag har jobbat lite grann med det\n                        innan så känner jag igen vad som ska skrivas och vad jag behöver skapa och\n                        kopiera men även hur entrypointen ser ut. Det enda som strulade var nog när\n                        jag skulle köra volymen till servern där pathen inte stämde och jag inte\n                        fick ett bra felmeddelande att gå på.\n                    </p>\n                    <h2>Hänger du med på koncepten kring klient och server?</h2>\n                    <p>\n                        Eftersom jag har jobbat lite med klient/server innan så känner jag igen mig.\n                        Så det känns ganska naturligt att man kan fetcha osv från en server del. Jag\n                        tycker att konceptet funkar och jag fattar vad som sker.\n                    </p>\n                    <h2>\n                        Strukturerade du Bash-scriptet annorlunda jämfört med förra kursmomentet?\n                    </h2>\n                    <p>\n                        Det var till den största delen likadant, dock använde jag mig av kommandot\n                        curl som jag inte har använt i förra kursmomentet. Denna gången kändes det\n                        bättre och jag förstod hur man skulle skriva i bash för att få allt att\n                        funka.\n                    </p>\n                </Text>\n                <Text kmom=\"05\" className={kmom === '05' ? kmom : 'none'}>\n                    <h2>\n                        Hur kändes det att skriva ett litet större bash-skript? Var det något som\n                        var mer eller mindre utmanande och tidskrävande?\n                    </h2>\n                    <p>\n                        Jag upplevde att det var straightforward i början tills jag insåg att jag\n                        inte hade något sätt att spara datan på. Efter lite omskrivning så löste\n                        allt sig. Till en början valde jag att använda mig av en check om ordet\n                        finns i en array, men jag lyckades inte att få det att funka. Jag valde\n                        tillslut att skriva en ful case istället, vilket jag är mer eller mindre\n                        nöjd med.\n                    </p>\n                    <p>\n                        Det tog även en lång stund för att förstå docker med alla dess images och\n                        containrar för att förstå vad jag behövde göra i kmom05.bash. Jag insåg även\n                        att jag hade gjort en fel entrypoint till kmom03 där jag inte hade gjort så\n                        att man kunde skicka med parametrar. Vilket var något jag fick lära mig\n                        under detta kursmomentet.\n                    </p>\n                    <h2>\n                        Kikade du på källkoden till maze-servern? Har du några reflektioner kring\n                        den?\n                    </h2>\n                    <p>\n                        Jag har kikat lite granna på källkoden inte så mycket. Det ser ut som att\n                        använda sig av JavaScript i express. Där datan är i json format.{' '}\n                    </p>\n                    <h2>Gjorde du nåt speciellt i din mazerunner som du vill lyfta fram?</h2>\n                    <p>\n                        Jag tycker att det har varit relativt “svårt”, vet inte om jag har gjort de\n                        på fel sätt men jag var tvungen att parsa ut all data och spara dem separat.\n                        Jag valde att göra på det viset för att jag var lite lat för att skriva en\n                        funktion som parsar allt åt mig. Men i slutändan så skulle det nog varit\n                        bättre att skriva en sådan funktion. Annars tycker jag att det har varit\n                        relativt lärorikt kmom med både bash skrift och regex.\n                    </p>\n                </Text>\n                <Text kmom=\"06\" className={kmom === '06' ? kmom : 'none'}>\n                    <h2>Kan du se fördelar/nackdelar med Compose?</h2>\n                    <p>\n                        Jag har innan jobbat lite grann med docker compose och skulle nog säga att\n                        jag inte har jättemycket kunskap inom det. Men än så länge så tycker jag att\n                        det endast har varit smidigt med docker compose. Jag tycker att det har\n                        varit smidigt att “få ihop” det jämfört med att man själv kör kommandon med\n                        massa taggar för att koppla samman allt. Den enda nackdelen i detta fall är\n                        bara att man måste bygga om sin container om och om igen när man ändrar\n                        något. Dock så finns det ju volymer som kan “motverka” det, så man slipper\n                        builda varje gång.\n                    </p>\n                    <h2>Hur väl har du fått ordning på begreppen kring klient och server?</h2>\n                    <p>\n                        Jag har sedan innan arbetat me klient och server och tycker att det är\n                        mycket smidigt. Dessutom så tycker jag även att det är ett bra sätt att\n                        separera allt. Så jag tycker att det är ett bra sätt att jobba på, då man\n                        inte vill att tex klienten ska göra allt. Alltså fylla funktionen som server\n                        och klient. Dessvärre om man har känslig data på sin server så vill man ju\n                        inte att alla ska kunna ha tillgång till det.\n                    </p>\n                    <h2>Känner du dig bekväm med Docker överlag?</h2>\n                    <p>\n                        Nu när vi har jobbat med det i kursen så känner jag mig ganska bekväm. Som\n                        sagt så har jag snuddat med det innan så jag är van med hur det ser ut. Dock\n                        är jag ju mer ovan med att bara köra “ren” docker utan docker compose.\n                        Annars tycker jag att det har gått smidigt och guiderna på dbwebb funkar\n                        bra.\n                    </p>\n                    <h2>Kommer du använda Docker utanför kursens ramar?</h2>\n                    <p>\n                        Jag ser ingen anledning till varför man inte ska använda docker, smidigt\n                        snabbt och lätt att ta bort jämfört om man ska installera allt på sin egen\n                        dator. Så jag kommer definitivt använda docker där jag ser en nytta att\n                        använda det.\n                    </p>\n                    <h2>Gjorde du någon uppdatering av Mazerunnerns struktur?</h2>\n                    <p>\n                        Jag har till den största delen återanvänt all kod som var där sedan innan\n                        funktioner mm. Det enda jag var tvungen att lägga in var loopen och if\n                        satser för att se vad användaren skriver in, och med den informationen så\n                        kallar jag de funktionerna som fanns innan.\n                    </p>\n                    <h2>Vad tycker du om regex så här långt?</h2>\n                    <p>\n                        Till en början så var det en wtf, men nu när man har jobbat lite med det så\n                        blir det klarare. Jag fattar det grundliga till en utsträckning men om man\n                        skulle skriva något avancerat så tror jag att man får öva lite till. Annars\n                        har det varit helt okej med regex i denna uppgiften.\n                    </p>\n                </Text>\n                <Text kmom=\"10\" className={kmom === '10' ? kmom : 'none'}>\n                    <h1>Krav 1:</h1>\n                    <p>\n                        När jag tittade på kravet så lät det inte supersvår att lösa men jag kom\n                        även på att vi hade gjort vissa delar i labbarna. Så jag kikade igenom dem\n                        och pysslade ihop en fungerande regex utav det. Dock så funkade det delvist,\n                        den delen som mappade ip:t funkade inte alls så jag fick lösa det på ett\n                        annat sätt.\n                    </p>\n                    <p>\n                        Det visade sig att detta kravet var inte så svår att lösa eftersom vi hade\n                        jobbat med bash, grupperingar, sed och regex innan i kursen, vilket var\n                        mycket smidigt.\n                    </p>\n                    <p>\n                        Jag lade ner lite extra tid på att formatera det snyggt med tabbar och nya\n                        rader, om man nu skulle öppna JSON filen. Detta underlättade att läsa av\n                        rader medan man felsökte, jämfört med att titta på en “ihoptryckt” JSON fil.\n                    </p>\n                    <h1>Krav 2:</h1>\n                    <p>\n                        Eftersom språk var valfritt i kravet så valde jag att använda mig av\n                        TypeScript och mer specifikt Express.js. Jag valde TypeScript eftersom det\n                        är ett språk jag tycker om att använda mig av och tycker att det är enklast.\n                    </p>\n                    <p>\n                        Det tog en liten stund att komma igång eftersom jag kände mig lite rostig\n                        med routes men jag lyckades lösa det.\n                    </p>\n                    <p>\n                        Jag hade lite problem med att tänka ut hur man skulle bygga upp\n                        filtreringen. Men jag lyckades lösa det med att filtrera queryn och utifrån\n                        det se vad som matchade i datan och sortera ut de som inte var relevant.\n                        Till en början så jämförde jag bara queryn och värdet på datan, men då kunde\n                        jag inte söka delar av tex queryn, så jag valde istället att “jämföra” med\n                        includes istället. Jag byggde upp ett “system” som funkade bra och var\n                        dynamisk på det sättet att man lätt kunde implementera krav 5.\n                    </p>\n                    <p>\n                        Annars så tyckte jag att det var en av de största utmaningarna i detta\n                        projektet, att man skulle få allt att fungera med filtreringen.\n                    </p>\n                    <h1>Krav 3:</h1>\n                    <p>\n                        Lik krav 1 så hade vi jobbat med en sådan bash script innan, så jag valde\n                        att titta igenom det. Den klurigaste delen av detta var att få kommandot\n                        view att funka. Jag hade problem med att få endast kommandot view att funka\n                        om man inte hade skickat något annat. Tillslut så löste jag det med att köra\n                        en “om input antalet av parametrarna är 0” eftersom det jag skrev innan inte\n                        funkade.\n                    </p>\n                    <p>\n                        Annars träffade jag inte på några större svårigheter med att implementera\n                        detta kravet. Jag upplevde att det var ganska straightforward om vad som\n                        behövdes göra. Annars var det lite komplicerat att få allt att funka med\n                        krav 5.\n                    </p>\n                    <p>\n                        Jag skulle också vilja påpeka att min server namn fil heter server.log\n                        istället för server.txt som visas i videon.\n                    </p>\n                    <h1>Krav 4:</h1>\n                    <p>\n                        Eftersom valet var öppet så valde jag att skriva det i React med TypeScript,\n                        vilket var ett naturligt val då det var något jag höll på i parallell\n                        kursen.\n                    </p>\n                    <p>\n                        Här valde jag att lägga till checkboxes för vad man ville söka och en\n                        searchbar. Tanken är att man kryssar i text månad och skriver in tex aug, så\n                        kan man bygga upp sin query som skrivs ut ovan. Så man kan alltså klicka in\n                        och skriva in på alla boxes så söker det efter matchningar. Efter den queryn\n                        så hämtas matchande data.\n                    </p>\n                    <p>\n                        Undertill så har jag valt att skriva ut hur många matchningar som finns men\n                        även paginerat dem. Varje sida visar 50 matchningar.\n                    </p>\n                    <p>\n                        Det som var ganska klurigt att fixa, något jag inte tänkte på efter jag hade\n                        spelat in redovisnings videon, var att när man gör en ny sökning så ska det\n                        ta dig tillbaka till page 0. Jag var tvungen att bygga om lite och det\n                        funkar som det ska nu.\n                    </p>\n                    <p>\n                        Varje “log” del får sitt eget kort, ett index och all data som togs med i\n                        krav 1.\n                    </p>\n                    <h1>Krav 5:</h1>\n                    <p>\n                        Att implementera denna delen var ganska lätt att göra speciellt i\n                        log2json.bash filen. Jag var bara tvungen att lägga till lite mappning mot\n                        datum och tid. Det var relativt smidigt och smärtfritt.\n                    </p>\n                    <p>\n                        Dock när det var dags att implementera sökningen via servern så var det\n                        struligt. Till en början lyckades jag inte lösa det med tiden, hur man\n                        skulle kunna söka tex 14 och få ut all för tiden 14 - 14:59, jag lyckades\n                        tillslut lösa det med en enkel “startsWith”. Jag fick även lära mig .every()\n                        som jag inte har använt innan, i mitt fall så var det att om den inte\n                        hittade något resultat alls så returnerar den allt.\n                    </p>\n                    <p>\n                        Implementationen till client delen var lite mekig, jag var tvungen att klura\n                        ut hur man skulle kolla när man skulle köra vad. Den lösningen jag kom till\n                        var att kolla på antalet input. Kanske inte det bästa sättet, då flertal\n                        buggar kan uppstå.\n                    </p>\n                    <h1>Allmänt:</h1>\n                    <p>\n                        Den enkla delen av docker var nog att skriva Dockerfile för klient, server,\n                        webbclient och webbservern. Till skillnad från de andra docker filerna så\n                        har jag för webbklienten valt att göra det i en 2 step build. Att få ihop\n                        det i docker-compose var inte heller så jätte svårt.\n                    </p>\n                    <p>\n                        Annars så tycker jag att projektet har gått bra att utföra, jag har inte\n                        riktigt träffat på större problem. Grundkraven tycker jag ha varit relativt\n                        enkla att utföra då vi har gjort mycket innan. Det var mycket man kunde\n                        återanvända tex med regex, bash script. Vilket jag tycker är en bra sak. Det\n                        tog inte heller för lång tid att göra alla krav på projektet, och jag tror\n                        om jag hade jobbat mer effektivt så skulle det ha gått 40% snabbare.\n                    </p>\n                    <p>\n                        Jag tycker att detta projektet har varit jätte rimlig. Eftersom vi har gått\n                        igenom allt innan så tycker jag att denna examination momentet har passat\n                        bra.{' '}\n                    </p>\n                    <h1>Avslutning:</h1>\n                    <p>\n                        Jag tycker att materialet för kursen har varit bra och mycket hjälpsam,\n                        speciellt för regex, något som jag tyckte var svårt att fatta i början. Jag\n                        tycker att det har varit jätteroligt att jobba med docker. Något som jag\n                        tycker är intressant att jobba med. Dock den enda delen jag inte har använt\n                        mig av är VM, speciellt då jag sitter på linux, så har jag inga direkta\n                        åsikter om det.\n                    </p>\n                    <p>\n                        Annars tycker jag att kursmomenten har varit rimliga och ligger rätt bra i\n                        svårighetsnivån medan arbetsbördan har inte varit skyhög. Jag är annars nöjd\n                        med kursen och dess examinationsmoment. Om jag skulle rekommendera andra\n                        denna kursen så skulle jag nog sagt att det är inte en av de tunga kurserna,\n                        men ändå en av de kurserna som är mest lärorika.\n                    </p>\n                    <p>\n                        Jag skulle ge kursen en 9/10. Kanske för att jag inte har strulat med docker\n                        osv då jag sitter på en linux miljö.\n                    </p>\n                </Text>\n            </div>\n        </Layout>\n    )\n}\n\nexport default Redovisning\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Layout from '../../components/layout/layout'\nimport styles from '../home/home.module.scss'\n// import { Helmet } from 'react-helmet'\n\nimport CodeIcon from '@material-ui/icons/Code'\nimport GitHubIcon from '@material-ui/icons/GitHub'\nimport EcoIcon from '@material-ui/icons/Eco'\n\nconst About = () => {\n    console.log(window.location)\n\n    return (\n        <Layout>\n            {/* <Helmet>\n                <title>Ida Lam | Om</title>\n            </Helmet> */}\n            <h1>Om</h1>\n            <CodeIcon className={styles['icon']} />\n            <h2>Läs mer om kursen på:</h2>\n            <div className=\"links\">\n                <a\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    href=\"https://github.com/dbwebb-se/vlinux\"\n                >\n                    <GitHubIcon fontSize=\"large\" />\n                    GitHub\n                </a>\n                <br />\n                <a\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    href=\"https://dbwebb.se/kurser/vlinux-v1\"\n                >\n                    <EcoIcon fontSize=\"large\" />\n                    Dbwebb\n                </a>\n            </div>\n        </Layout>\n    )\n}\n\nexport default About\n","import React from 'react'\nimport Home from './views/home/home'\nimport Redovisning from './views/redovisning/redovisning'\nimport About from './views/about/about'\nimport './App.scss'\n\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nfunction App() {\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"*/om\">\n                    <About />\n                </Route>\n                <Route path=\"*/redovisning\">\n                    <Redovisning />\n                </Route>\n                <Route path=\"\">\n                    <Home />\n                </Route>\n            </Switch>\n        </Router>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}